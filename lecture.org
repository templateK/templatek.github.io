#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./org.css"/>
#+TITLE: Data Structure - 2020 KNOU


* Abstract Data Type

We consider abstract data types (ADTs), which allow us to build programs that use high-level abstractions.\\
With abstract data types, we can separate the conceptual transformations that our programs perform on our\\
data from any particular data structure representation and algorithm implementation.

** Stack ADT 

Suspends a computation or data and restore them in a particular order. \\

LIFO (Last In First Out).

*** The Interface
#+begin_src  c
  // creating ADT instance
  void stack_init();

  // check wether ADT instance is empty
  bool stack_empty();

  // insert an item to ADT instance
  void stack_push(Item);

  // getting back an item from ADT instance
  Item stack_pop();
#+end_src

[[./Lifo_stack.png]]

*** Applications 

- Arithmetic expression conversion. Infix notation(for Human) to Postfix(for Computer) notation.

- Arithmetic expression evaluation.

- Depth first search algorithm.

- Function call and return state. it's called ~Call stack~.

  For example, The stack trace is displayed when the function call throws an exception in java, 

  #+begin_src java
    public class Main {
      public static void main(String[] args) { a(); }
      static void a() { b(); }
      static void b() { c(); }
      static void c() { d(); }
      static void d() { Thread.dumpStack(); }
    }

    // java.lang.Exception: Stack trace
    //   at java.base/java.lang.Thread.dumpStack(Thread.java:1383)
    //   at Main.d(Main.java:6)
    //   at Main.c(Main.java:5)
    //   at Main.b(Main.java:4)
    //   at Main.a(Main.java:3)
    //   at Main.main(Main.java:2)
  #+end_src


** Queue ADT 

Inserting elements from one side and popping out them from the other side.

FIFO (First In First Out).

*** The Interface

#+begin_src  c
  // creating ADT instance
  void queue_init();

  // check wether ADT is empty
  bool queue_empty();

  // add item to the back
  void queue_push(item);

  // get an item from the front
  item queue_pop();
#+end_src

*** Applications 

- OS thread scheduling.
  + FCFS: first come first served policy.
  + RR: Round-Robin.

- Processing network packet.

- Breadth-first Search(BFS) in Searching algorithm.


*** Implementation 

**** Linked list Queue

A linked list based queue using [[*Self Referential Struct][Self Referential Struct]].

[[./linked_list.png]]

**** Circular Queue

An array based queue implementation. it's also called ~ring buffer~

#+begin_src c
  // Preserve one slot for differentiating empty and full state.
  #define CAPACITY1 256

  struct Queue {
      int arr[CAPACITY1];
      int front;
      int rear;
  };

  bool is_queue_empty(Queue *queue) {
      return queue->front == queue->rear;
  }

  bool is_queue_full(Queue *queue) {
      return queue->front == (queue->rear + 1) % CAPACITY1;
  }
#+end_src


* Tree

** Binary Tree

*** Properties of Binary Tree

it has two children nodes. left and right

The height of the tree which has total n nodes: h = Ceil(log_2(n+1)) (why?)

**** full binary tree

All nodes have either two children or none.

**** perfect binary tree

All nodes have both children except on the leaf.

All leaves should be at the same depth from the root.

**** complete binary tree

Every nodes are completely filled except last level of nodes.

On the last level, all nodes should be as far left as possible.

** Tree Traversal

*** Preorder

Node => Left => Right

 #+begin_src  c
   void preorder_traverse(Tree *tree, Node *node) {
       if (node == NULL) {
           return;
       }
       do_something(node);
       preorder_traverse(tree, node->left);
       preorder_traverse(tree, node->right);
   }
 #+end_src

*** Inorder

Left => Node => Right

 #+begin_src  c
   void inorder_traverse(Tree *tree, Node *node) {
       if (node == NULL) {
           return;
       }
       inorder_traverse(tree, node->left);
       do_something(node);
       inorder_traverse(tree, node->right);
   }
 #+end_src

*** Postorder

Left => Right => Node

 #+begin_src  c
   void postorder_traverse(Tree *tree, Node *node) {
       if (node == NULL) {
           return;
       }
       postorder_traverse(tree, node->left);
       postorder_traverse(tree, node->right);
       do_something(node);
   }
 #+end_src

** Binary Search Tree

The search tree data structure supports many dynamic-set operations,

including SEARCH, MINIMUM, MAXIMUM, PREDECESSOR, SUCCESSOR, INSERT, and DELETE.


*** Tree Minimum
 #+begin_src python 
   def TreeMinimum(x):
       while x.left is not None:
           x = x.left
       return x
 #+end_src

Can you implement TreeMaximum? 

*** Tree Inorder Successor

[[./tree_successor.png]]
 #+begin_src python
   def TreeSuccessor(x):
       if x.right is not None:
           return TreeMinimum(x.right)
       y = x.p
       while y is not None and x == y.right:
           x = y
           y = y.p
       return y
 #+end_src

What is the key number of inorder successor of the 13?

How do we implement TreePredecessor?

*** Tree Insert

[[./tree_insert.png]]
 #+begin_src python
   def TreeInsert(T, z):
       y = None
       x = T.root
       while x is not None:
           y = x
           if z.key < x.key:
               x = x.left
           else:
               x = x.right
       z.p = y
       if y is None:
           T.root = z  # tree was empty
       elif z.key < y.key:
           y.left = z
       else:
           y.right = z
 #+end_src


*** Tree Delete

#+begin_src python
def TransPlant(T, u, v):
    if u.p is None:
        T.root = v
    elif u == u.p.left:
        u.p.left = v
    else:
        u.p.right = v
    if v is not None:
        v.p = u.p
#+end_src


[[./tree_delete.png]]

#+begin_src python
  def TreeDelete(T, z):
      if z.left is None:
          TransPlant(T, z, z.right)
      elif z.right is None:
          TransPlant(T, z, z.left)
      else:
          y = TreeMinimum(z.right)
          if y.p != z:
              TransPlant(T, y, y.right)
              y.right = z.right
              y.right.p = y
          TransPlant(T, z, y)
          y.left = z.left
          y.left.p = y
#+end_src

** Max(Min) Heap

A heap is a specialized tree-based data structure which is a complete binary tree

that satisfies the [[*Heap Invariant][heap invariant]].

Can you expect time complexity of the operation this datastruct supports?

*** Applications

Fast Max(Min) value extrating, Heap sorting, Priority Queue


*** Array based Heap Index calculation

[[./heap_indexing.png]]

#+begin_src  python
  def Parent(i):
      return math.floor(i/2)

  def Left(i):
      return 2*i 

  def Right(i):
      return 2*i + 1
#+end_src

*** Heap Invariant

 Every parent node key must be greater than(less than) equal to

 child node key. therefore, the root key is the maximum(minimum).

[[./heapify.png]]
#+begin_src  python
  def Max_Heapify(A, i):
      l = Left(i)
      r = Right(i)
      if l <= A.heap_size and A[l] > A[i]:
          largest = l
      else:
          largest = i
      if r <= A.heap_size and A[r] > A[largest]:
          largest = r
      if largest != i:
          A[i], A[largest] = A[largest], A[i]
          Max_Heapify(A, largest)
#+end_src

*** extract-min or extract-max
#+begin_src  python
  def Heap_Extract_Max(A):
      if A.heap_size < 1:
          raise Exception("heap underflow")
      max = A[1]
      A[1] = A[A.heap_size]
      A.heap_size = A.heap_size - 1
      Max_Heapify(A, 1)
      return max
#+end_src

*** insert

[[./heap_increase_key.png]]

#+begin_src  python
  def Heap_Increase_Key(A, i, key):
      if key < A[i]:
          raise Exception("new key is small than current key")
      A[i] = key
      p = Parent(i)
      while i > 1 and A[p] < A[i]:
          A[i], A[p] = A[p], A[i]
          i = p
#+end_src

#+begin_src python
  def Max_Heap_Insert(A, key):
      A.heap_size = A.heap_size + 1
      A[A.heap_size] = -infinity
      Heap_Increase_Key(A, A.heap_size, key)
#+end_src


* C language briefing

** variable
- declaration: ~<type> <identifier> [= <initial value>];~
  #+begin_src c
    int foo;
    char bar = 'c';
  #+end_src

** function
- declaration: ~<return type> <identifier> ( [parameters] ) {<body statements> [<return> <expression>;]}~

- parameter definition is almost same with the variable decl.
  it can be extended with comma character

    #+begin_src c
    int some_func(int a, int b, int c) {
        return a + b + c;
    }

    // `char *name` is a pointer parameter we'll explain that later on.
    void foo_func(char *name) {
        printf("hello %s\n", name);
    }
    #+end_src

**  printf
- A function for displaying variable.
  it's defined in the `stdio.h` (standard input output)
  it takes an format specifier and constants and variables to print.

- format specifier: a string for defining how to print the variable.

  | "%d"   | int                                                |
  | "%2d"  | int at least 2 characters wide in right aligned.   |
  | "%-2d" | int at least 2 characters wide in left aligned.    |
  | "%02d" | int at least 2 characters wide with leading zeros. |
  | "%x"   | int as hexidecimal notation.                       |
  | "%f"   | float                                              |
  | "%c"   | char                                               |
  | "%s"   | char *                                             |
                                                                
    #+begin_src c
  int a = 1;                                                    
  printf("%d\n", a);
    #+end_src


** array
- declaration: ~<type> <name> [<size>][<size>]*~
  the `SIZE` must be known at compile time(the time when the executable is being built by the compiler).
  c language spec mandates row-major order for storing multi-dimensional array.
   https://en.wikipedia.org/wiki/Row-_and_column-major_order

    #+begin_src  c
    int arr[5]; // index range: [0~4]
    int arr2[2][3]; // index range [0~1][0~2]
    #+end_src

- usage: array element can be accessed with index(normally integer value in C language).
  
    #+begin_src c
   int x = arr[0];
   int y = arr2[1][2];
   printf("%d %d\n", x, y);
    #+end_src


**  char * string aka. C string
- it's just array of `char` with '\0' on the end of the array.
    #+begin_src c
  char *foo = "abcd";

  char foo[5] = {'a', 'b', 'c', 'd', '\0'};
    #+end_src


** struct
- declaration:
  ~struct <identifier> {<field delcarations>} [<instance>];~

- usage:
    #+begin_src c
    // decl Foo struct 
    struct Foo {
        int field1;
        char field2;
    };

    // init Foo struct instance
    struct Foo foo = { 0, 'a' };

    struct Foo foo = { 'a', 0 };

    // dot syntax called "designated field initializer"
    struct Foo foo = { .field1 = 0, .field2 = 'a' };

    // accessing field
    printf("field1: %d, field2: %c\n", foo.field1, foo.field2);
    #+end_src


**  typedef struct
- declaration: ~typedef struct <identifier> {<field delcarations>} [<typename>];~

    #+begin_src c
    // decl Foo struct as a type 
    typedef struct Foo {
        int field1;
        char field2;
    } FooType;

    // init Foo struct type instance
    FooType foo = {
        .field1 = 0,
        .field2 = 'a'
    };
    #+end_src

** pointer & reference

- purpose: Sometimes, we need to move around variables without copying
  it's contents for performance reasons and there are a few cases
  where it's mandatory. for example, heap allocated pointer and it's content.

*** pointer

- declaration: ~<type> * <identifier> [= <initial reference value>];~

- it's variable of an address for some variable or function etc.

- it's also used as an dereferencing mechanism when it is used outside of declaration.

*** reference

- declaration: &<identifier>;
  it's a mechanism for getting an address of the target.

*** dereferencing

- Getting the content of the pointer.

  + non-struct variable: ~*<identifier>~

  + struct variable: ~<identifier> -> <field name>~ aka `arrow syntax`.

- dereferece example
#+begin_src c
  #include <stdio.h>

  typedef struct Foo {
      int a;
      int b;
  } Foo;

  int main() {
      Foo foo = {.a = 1, .b = 2};
      Foo *bar = &foo;
      Foo wat = *bar; // dereferenced foo struct copied to wat.

      printf("foo address: %p\n",&foo);
      printf("bar address: %p\n",bar);
      printf("wat address: %p\n",&wat);
      return 0;
  }
  // foo address: 0x7ffee918b200 
  // bar address: 0x7ffee918b200 
  // wat address: 0x7ffee918b1f0 
#+end_src


*** pointer arithmetic

- pointer value can be changed just like ordinary integer values.

*** example
#+begin_src  c
  int a = 1;
  // `&a` means getting the address of the `a`.
  // the pointer variable `b` is set by address of the `a`.
  int *b = &a; 

  void foo(int *a) {
      //here the a is dereferenced by `*` operator. aka. getting the content.
      printf("%d\n", *a);
  }

  // if variable is a struct, we can dereference the fields of it with `->` syntax.
  struct Foo {
      int field1;
      char field2;
  };

  struct Foo foo = { 0, 'a' };

  struct Foo *pfoo = &foo;

  printf("field1: %d, field2: %c\n", pfoo->field1, pfoo->field2);

  int arr[5] = {1,2,3,4,5};
  int *pint = arr;
  printf("%d\n", *pint);   // print current content of parr.
  pint++;                  // increase pint address by size of single integer.
  printf("%d\n", *pint++); // print then content and increase pointer at the same(?) time.
  pint += 1;               //
  printf("%d\n", *pint);   // what's the result of this?

  char *pchar = (char *)pint;
  pchar += 4;
  pint = (int *)pchar;
  printf("%d\n", *pint);   // what's the result of this?
#+end_src

** Self Referential Struct

A struct contains a pointer field to same type of struct instance.

~struct Foo~ contains same type struct Foo pointer field ~next~
#+begin_src c
   //             ++--------------+
   //             ||              |
   //             \/              |
  typedef struct Foo { //         |
                       //         |
    struct Foo *next;  //         |
       //   \                     |
       //    \--------------------+
  } Foo;

#+end_src

** control flow

*** if else 

*** for loop

*** while, do ~ while

*** switch
- synatx
  #+begin_src  c
    switch (<identifier>) {
    case <expression>: 
         //do something this.;
         //do something that.;
         break;
    case <expression>:
         ...
         break;
    case <expression>:
    case <expression>:
         // may do something in between matching cases;
    case <expression>:
         ...
         break;
    default:
         //do something in case of none of the matches are successful.;
    }
  #+end_src

- the ~<expression>~ for case must be ~constant expression~. 

- the ~default~ is optional.

*** break
- Abort the nearst loop construct like   ~for~, ~while~, ~do ... while~ and the ~switch~.
    #+begin_src c
      for(int i =0; i < 10; i++) {

          for(int j =0; j < 10; j++) { //  <-------------+
                                       //                |
              if ( i > 5 && j > 5) {   //                |
                  break; // this aborts inner for loop---+
              }
          }
      }
    #+end_src
  
*** continue
- similar to break, it does not completely aborts loop entirely but just aborts single execution of the loop. 
    #+begin_src c
      for(int i =0; i < 10; i++) { 

          if ( i % 2 == 0 ) { // <=== whenever this condition is met, those executions will be skipped. 
              continue;                     //                                    | 
          }                                 //                                    |
                                            //                                    |
          printf("I: %3d,  J: %3d\n", i, j);// <----------------------------------+
          printf("hooray!!");               // <----------------------------------+
      }
    #+end_src

*** goto
- synatx: ~goto <label name>;~
- can jump to label
- famous quote: "goto considered harmful" https://www.explainxkcd.com/wiki/index.php/292:_goto

*** label
- synatx: ~<label name>:~
- a placeholder for goto


** operator precedence 
https://en.cppreference.com/w/c/language/operator_precedence


** memory model for programmer.

*** whole executable memory layout

[[./c_program_memory_layout.png]]

- TEXT: Program instructions. read only
  
- DATA: Global and static variable.

- BSS: any uninitialized variable including global and static one.

*** heap allocated variable.

- it can be slow compared to stack. (why?)

- heap allocation is runtime operation. (answer)

- it's allocated/deallocated by programer manually.

  For c language, the ~malloc~ and ~free~ function is used for allocation/deallocation.

#+begin_src  c
  #include <stdlib.h>

  // allocation for 100 chars.
  // malloc returns (void *) type, so we must type conversion.
  char *foo = (char *)malloc(100);

  // deallocation
  free(foo);
#+end_src


*** stack allocated variable.

- It can be fast compared to heap allocation. (why?)

- The total system stack size of a executable is predetermined by compiler setting

  and/or the OS. In fact, the change of stack size is just a stack pointer movement (answer).

- the memory management is controlled by language semantics.

  For c language, block scope is the main sematic for stack allocations.

#+begin_src c
  int main() {
    int a;

    {
      int b;
    } // <== here b is destroyed

    return 0
  } // <== here a is destroyed
#+end_src

** preprocessor

*** #include

- syntax: ~#include <relative path>~ or  ~#include "relative path"~

- double quote ~#include "foo.h"~  vs angle bracket  ~#include <foo.h>~

- double quote searches current directory of the current source or project file.

- single quote searches ~system directory~ which is set by compiler option and configurations.


*** #define

- syntax: ~#define A B~

- replace ~A~ with ~B~

  
*** #ifdef #elif #endif


** Input / Ouput

*** Console I/O

- input: ~void scanf(char *format, *arguments...)~
#+begin_src c
  int a;
  scanf("%d", &a);
#+end_src

- output: ~void printf(char *format, arguments...)~
#+begin_src  c
  int a = 1;
  printf("%d", a);
#+end_src


*** File I/O

- opening a file: ~FILE *fopen(char *filename, char *mode)~

- closing a file: ~fclose(FILE *file)~

- the ~mode~ parameter

  | Mode | Read as         | Action | Operation  | File exists      | File doesn't exist |
  |------+-----------------+--------+------------+------------------+--------------------|
  | "r"  | read            | Open   | Read       | read from start  | failure to open    |
  | "w"  | write           | Create | Write      | destroy contents | create new         |
  | "a"  | append          | Append | Write      | write to end     | create new         |
  | "r+" | read extended   | Open   | Read/Write | read from start  | error              |
  | "w+" | write extended  | Create | Read/Write | destroy contents | create new         |
  | "a+" | append extended | Open   | Read/Write | write to end     | create new         |

  [[./file_open_mode_in_c.png]]

- Input

  + read single line from file:  ~char *fgets(char *buffer, FILE *file)~

  + read single character from file:  ~int fgetc(FILE *file)~

  + beware that ~fgetc~ returns ~int~ (why?)

    
- Output

  + write a character to file:  ~int fputc( int ch, FILE *stream )~

  + write a null-terminated string to file:  ~int fputs(char *str, FILE *stream )~

- Special FILE pointer 

    #+begin_src c
      FILE *stdin; // standard input
      FILE *stdout; // standard output
      FILE *stderr; // standard error

      // what is the differences between these operations?
      printf("foo");
      fprintf(stdout, "foo");
      fprintf(stderr, "foo");
    #+end_src

- File Error Handling

  Check the return value of ~fopen~ ~fputs~ ~fgets~

  Non-zero value indicates that there's error. 

  Most commonly checked error value is ~EOF~ which indicates End of File or some other errors.


- example 

    #+begin_src c
      FILE *file = fopen("foo.txt", "r");
      char *result;
      char buf[256];
      while ( (result = fgets(buf, 256, file)) != NULL) {
          printf("%s", result);
       }
      fclose(file);
      #+end_src


** Error Handling 

  Interal error state will be set when some c functions is being executed if the operation fails.

  We can check these errors by ~int ferror( FILE *file )~ in file handling etc.

  the return value is either ~0~ on successful or non-zero value 

  Windows
    - [[https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/fputs-fputws?view=vs-2019][microsoft fputs]]
    - [[https://docs.microsoft.com/en-us/cpp/c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr?view=vs-2019][microsfot errno]]

  Linux
    - [[https://linux.die.net/man/3/fputs][linux man page fputs]]
    - [[https://linux.die.net/man/3/errno][linux man page errno]]
    - [[https://linux.die.net/man/3/explain_ferror][linux man page explain＿error]]

* TODO
** DONE null terminated string in C
** DONE control flow constructs
** DONE file I/O
** DONE error handling in C
** rinb buffer algorithm
** code organization.
*** header file
**** difference between include "foo.h" vs include <foo.h>
*** prerpocessor
**** #define #ifdef #pragma once
** dynamic allocation for struct
** using library
